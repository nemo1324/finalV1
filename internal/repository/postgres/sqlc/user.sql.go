// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, login, pass, status)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateUserParams struct {
	Name   string `json:"name"`
	Login  string `json:"login"`
	Pass   string `json:"pass"`
	Status string `json:"status"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Login,
		arg.Pass,
		arg.Status,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, login, pass, created_at, status FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Login,
		&i.Pass,
		&i.CreatedAt,
		&i.Status,
	)
	return &i, err
}

const getUserByLogin = `-- name: GetUserByLogin :one
SELECT id, name, login, pass, created_at, status FROM users
WHERE login = $1
LIMIT 1
`

func (q *Queries) GetUserByLogin(ctx context.Context, login string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByLogin, login)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Login,
		&i.Pass,
		&i.CreatedAt,
		&i.Status,
	)
	return &i, err
}
